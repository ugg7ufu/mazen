version: '3.8'

services:
  # خادم Nginx العكسي
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - php
      - python
    restart: unless-stopped
    networks:
      - prod-network

  # خادم PHP
  php:
    build: 
      context: ../../src/php
      dockerfile: Dockerfile.prod
    volumes:
      - ../../src/php:/var/www/html
      - ./logs/php:/var/log/php
    environment:
      - DB_HOST=mysql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - APP_ENV=production
      - APP_DEBUG=false
    depends_on:
      - mysql
    restart: unless-stopped
    networks:
      - prod-network

  # خادم Python Flask
  python:
    build:
      context: ../../src/python
      dockerfile: Dockerfile.prod
    volumes:
      - ../../src/python:/app
      - ./logs/python:/app/logs
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - DATABASE_URL=${DATABASE_URL}
    restart: unless-stopped
    networks:
      - prod-network

  # قاعدة بيانات MySQL
  mysql:
    image: mysql:8.0
    volumes:
      - mysql_data:/var/lib/mysql
      - ../../database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs/mysql:/var/log/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
    restart: unless-stopped
    networks:
      - prod-network

  # Redis للكاش
  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    restart: unless-stopped
    networks:
      - prod-network

  # مراقب الأداء
  monitoring:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - prod-network

  # واجهة مراقبة Grafana
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    restart: unless-stopped
    networks:
      - prod-network

  # خادم النسخ الاحتياطية
  backup:
    image: alpine:latest
    volumes:
      - mysql_data:/backup/mysql
      - ./backups:/backup/files
    environment:
      - DB_HOST=mysql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    command: |
      sh -c "
        apk add --no-cache mysql-client &&
        while true; do
          mysqldump -h mysql -u $$DB_USER -p$$DB_PASS $$DB_NAME > /backup/files/backup-$$(date +%Y%m%d-%H%M%S).sql &&
          find /backup/files -name 'backup-*.sql' -mtime +7 -delete &&
          sleep 86400
        done
      "
    depends_on:
      - mysql
    restart: unless-stopped
    networks:
      - prod-network

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  prod-network:
    driver: bridge 